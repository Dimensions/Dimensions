#!/bin/bash

#Based off of Pore's which is based off of Spigot's.

basedir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

dim_help() {
    echo "Usage: $0 <command>"
    echo "Available commands:"
    command -v column >/dev/null 2>&1 && cmd="column -t -s -" || cmd=cat
    $cmd <<<'
  help - Show this help page.
  update - Update the submodules and apply the NMS patches.
  patches - Rebuild the NMS patches.
  init - Copy direct & indirect into mcp and setup Solar.
  export - Export the obfuscated code to put into a jar.'
}

dim_export(){
    #Recompile NMS
    mcp/recompile.sh

    #Reobfuscate NMS
    mcp/reobfuscate.sh	

    echo Grab the files in mcp/reobf/minecraft_server/ and put them into any vanilla jar!
}

dim_init(){
    #Copy NMS source to compare for patches later
    mkdir -p mcp/src/old_nms
    cp -a mcp/src/minecraft_server/net/ mcp/src/old_nms/net/

    echo Done copying NMS source

    #Set up Solar submodule
    cd Solar
    git submodule init
    git submodule update
    cd ..

    echo Solar set up

    #Copy Solar API into NMS
    cp -a Solar/src/dimensions mcp/src/minecraft_server/

    echo Done moving Solar code into NMS

    #Copy indirect code into NMS
    mkdir -p indirect/dimensions
    cp -a indirect/dimensions/ mcp/src/minecraft_server/

    echo Done moving indirect code into NMS
}

apply_patches() {
    # Based on https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/browse/applyPatches.sh#7
    source=$1
    repo=$(basename $1)
    target=$2
    patchdir=$3
    branch=${4:-origin/master}

    cd "$basedir/$source"
    git reset --hard "$branch" >/dev/null
    git branch -f upstream >/dev/null

    cd "$basedir"
    [ -d "$basedir/$target" ] || git clone "$source" "$target" -b upstream

    cd "$basedir/$target"

    echo ">> Resetting $target to $repo..."
    git remote rm upstream >/dev/null 2>&1
    git remote add upstream "../$source" >/dev/null 2>&1
    git checkout master >/dev/null 2>&1
    git fetch upstream >/dev/null 2>&1
    git reset --hard upstream/upstream

    echo ">> Applying patches to $target..."
    git am --abort >/dev/null 2>&1
    git am --3way "$basedir/$patchdir/"*.patch || {
        >&2 echo ">> Failed to apply patches to $target (from $source)."
        exit 1
    }

    echo ">> Successfully applied patches to $repo"
}

dim_update() {
    echo "> Updating submodules..."
    git submodule update --init
    echo "> Updating MCP..."
    apply_patches mcp/src/old_nms/net/ mcp/src/minecraft_server/net/ patches
}


clean_patches() {
    # Based on https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/browse/rebuildPatches.sh#7
    cd "$1"
    for patch in *.patch; do
        gitver=$(tail -n 2 $patch | grep -ve "^$" | tail -n 1)
        diffs=$(git diff --staged $patch | grep -E "^(\+|\-)" | grep -Ev "(From [a-z0-9]{32,}|\-\-\- a|\+\+\+ b|.index)")

        testver=$(echo "$diffs" | tail -n 2 | grep -ve "^$" | tail -n 1 | grep "$gitver")
        if [ "x$testver" != "x" ]; then
            diffs=$(echo "$diffs" | head -n -2)
        fi

        if [ "x$diffs" == "x" ] ; then
            git reset HEAD $patch >/dev/null
            git checkout -- $patch >/dev/null
        fi
    done
}

make_patches() {
    # Based on https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/browse/rebuildPatches.sh#26
    source=$1
    repo=$(basename $1)
    target=$2
    patchdir=$3

    echo ">> Creating patches from $repo to $target..."
    cd "$basedir/$target"
    git format-patch --no-stat -N -o "$basedir/$patchdir" upstream/upstream
    cd "$basedir"
    git add -A "$basedir/$patchdir"
    clean_patches "$basedir/$patchdir"
    echo ">> Successfully saved patches for $repo!"
}

dim_patches() {
    echo "> Recreating patches for MCP..."
    make_patches mcp/src/old_nms/net/ mcp/src/minecraft_server/net/ patches
}

dim_build(){
    #Run when you want to get your code ready to commit

    mkdir -p indirect/dimensions/solar

    #Copy indirect files from NMS into indirect/
    cp -a mcp/src/minecraft_server/dimensions/ indirect/

    echo Indirect code moved into indirect folder

    #Copy Solar code into Solar
    cp -a indirect/dimensions/solar/ Solar/src/dimensions/
    #Remove everything from old solar folder
    rm -rf indirect/dimensions/solar/

    echo Solar code moved into Solar/src/dimensions/solar/
    
    #Build patches into direct/
    dim_patches
}

dim_setup_eclipse(){
    mkdir -p mcp/eclipse/Server/src
    cp -a mcp/src/minecraft_server/net mcp/eclipse/Server/src
    cp -a mcp/src/minecraft_server/dimensions mcp/eclipse/Server/src
    cp -a mcp/jars mcp/eclipse/Server

    echo Files moved into eclipse/Server/
}

if [ -z $1 ]; then
    dim_help
    exit
fi

# TODO: Improve this, just a little bit lazy right now
if [ "$(type -t "dim_$1")" = "function" ]; then
    "dim_$@"
elif [ "$(type -t "dim_$1_$2")" = "function" ]; then
    "dim_$1_$2"
else
    >&2 echo "Unknown command: '$@'. Type '$0 help' for more information."
    exit 1
fi
